package ru.romindous.skills.skills.trigs;

import java.util.Arrays;
import java.util.List;
import java.util.Locale;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.ItemType;
import ru.komiss77.modules.items.ItemBuilder;
import ru.komiss77.utils.TCUtil;
import ru.romindous.skills.skills.sels.Selector;

public enum Trigger {//—Ç—Ä–∏–≥–µ—Ä

    ATTACK_ENTITY("–ù–∞–Ω–µ—Å–µ–Ω–∏–µ –£—Ä–æ–Ω–∞", null, ItemType.IRON_SWORD, false, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ", "—É—Ä–æ–Ω–∞ –ø–æ —Ü–µ–ª–∏. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–µ –ª–æ–∫–∞—Ü–∏—é"), //EntityDamageByEntityEvent
    PROJ_LAUNCH("–ó–∞–ø—É—Å–∫ –°–Ω–∞—Ä—è–¥–∞", null, ItemType.FIRE_CHARGE, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ª—é–±–æ–≥–æ", "—Å–Ω–∞—Ä—è–¥–∞. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –ª–æ–∫–∞—Ü–∏—é"), //ProjectileLaunchEvent
    RANGED_HIT("–ü–æ–ø–∞–¥–∞–Ω–∏–µ —Å –î–∏—Å—Ç–∞–Ω—Ü–∏–∏", null, ItemType.APPLE, false, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ø–∞–¥–∞–Ω–∏–∏ —Å–Ω–∞—Ä—è–¥–æ–º –≤", "–ª—é–±—É—é —Ü–µ–ª—å. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–µ –ª–æ–∫–∞—Ü–∏—é"), //ProjectileHitEvent
    KILL_ENTITY("–£–±–∏–π—Å—Ç–≤–æ –°—É—â–Ω–æ—Å—Ç–∏", null, ItemType.ROTTEN_FLESH, false, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ –ª—é–±–æ–π —Ü–µ–ª–∏", "–∏–≥—Ä–æ–∫–æ–º. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–µ –ª–æ–∫–∞—Ü–∏—é"), //PlayerKillEntityEvent
    SHIFT_LEFT("–®–∏—Ñ—Ç —Å –õ–ö–ú", null, ItemType.TNT_MINECART, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –õ–ö–ú –≤ –∫—Ä–∞–¥—É—â–µ–º—Å—è", "–≤–∏–¥–µ. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –±–ª–æ–∫–∞, –Ω–∞", "¬ß–∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), //PlayerInteractEvent
    SHIFT_RIGHT("–®–∏—Ñ—Ç —Å –ü–ö–ú", null, ItemType.CHEST_MINECART, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ü–ö–ú –≤ –∫—Ä–∞–¥—É—â–µ–º—Å—è", "–≤–∏–¥–µ. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –±–ª–æ–∫–∞, –Ω–∞", "¬ß–∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"), //PlayerInteractEvent
    SHIFT_JUMP("–®–∏—Ñ—Ç —Å –ü—Ä—ã–∂–∫–æ–º", null, ItemType.BIG_DRIPLEAF, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø—Ä—ã–∂–∫–µ –≤ –∫—Ä–∞–¥—É—â–µ–º—Å—è", "–≤–∏–¥–µ. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), //PlayerJumpEvent -
    DOUBLE_JUMP("–î–≤–æ–π–Ω–æ–π –ü—Ä—ã–∂–æ–∫", null, ItemType.SMALL_DRIPLEAF, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º –ø—Ä—ã–∂–∫–µ.", "¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), //PlayerToggleFlightEvent -
    USER_DEATH("–°–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π –£—Ä–æ–Ω", null, ItemType.SKELETON_SKULL, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–º–µ—Ä—Ç–µ–ª—å–Ω–æ–≥–æ", "—É—Ä–æ–Ω–∞. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), //EntityDeathEvent -
    USER_HURT("–ü–æ–ª—É—á–µ–Ω–∏–µ –£—Ä–æ–Ω–∞", null, ItemType.FERMENTED_SPIDER_EYE, false, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ", "—É—Ä–æ–Ω–∞. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é —Ü–µ–ª–∏"), //EntityDamageEvent -
    SPAWN_MINION("–°–ø–∞–≤–Ω –ü—Ä–∏—Å–ø–µ—à–Ω–∏–∫–∞", null, ItemType.GLOW_SQUID_SPAWN_EGG, false, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ –ø—Ä–∏—Å–ø–µ—à–Ω–∏–∫–∞.", "¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –ª–æ–∫–∞—Ü–∏—é"), //MinionSpawnEvent -
    ABIL_CAST("–ü—Ä–æ–∫–∞—Å—Ç –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏", null, ItemType.ENDER_EYE, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ª—é–±–æ–π", "—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. ¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –µ–π –ª–æ–∫–∞—Ü–∏—é"), //EntityCastEvent -
    UNKNOWN("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", null, ItemType.SCULK_SENSOR, true, "–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–µ–æ–ø–∏—Å—É–µ–º—ã—Ö –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö.", "¬ß–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"); //Event -

    private static final String LOC_CLR = "<gray>";
    private static final String prefix = "trigs.";
    public static final String color = "<pink>";
    public static final String SIDE = "üüÉ";

//    public final double cdFactor = value("cdFactor", 1d);
//    public final double soulFactor = value("soulFactor", 1d);

    private final String name;
    private final Selector sel;
    private final ItemType icon;
    private final String[] desc;

    Trigger(final String name, final Selector sel,
    final ItemType icon, final boolean self, final String... desc) {
        this.sel = sel;
        this.name = name;
        this.icon = icon;
        final String[] dsc = new String[desc.length + 1];
        for (int i = 0; i != desc.length; i++) {
            dsc[i] = TCUtil.N + desc[i].replace("¬ß", LOC_CLR);
        }
        dsc[desc.length] = "<dark_gray>–¶–µ–ª—å: " + TCUtil.A
            + (self ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¢—ã)" : "–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω–∞—è –°—É—â–Ω–æ—Å—Ç—å");
        this.desc = dsc;
    }

    public Selector selector() {
        return sel;
    }

    public String disName() {
        return color + name;
    }

    public ItemStack icon() {
        return new ItemBuilder(icon).name(TCUtil.sided(disName(), SIDE)).lore(desc).build();
    }

    public List<String> context() {
        return Arrays.asList(desc);
    }

    /*private double value(final String val, final double def) {
        return ConfigVars.val(prefix + name() + "." + val, def);
    }*/

    public static Trigger get(final String st) {
        if (st == null || st.isEmpty()) return UNKNOWN;
        try {
            return valueOf(st.toUpperCase(Locale.ROOT));
        } catch (IllegalArgumentException e) {
            return UNKNOWN;
        }
    }

    public String describe() {
        return TCUtil.N + "–¢—Ä–∏–≥–µ—Ä " + TCUtil.sided(disName(), SIDE);
    }
}
